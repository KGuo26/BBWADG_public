#define NGEO   (p_Nvgeo+p_Nfgeo*p_Nfaces) // total number of geometric factors
#define ddot4(a,b)  a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w

// defined in WaveOKL3d (initWave3d)
#if USE_DOUBLE
#define dfloat double
#define dfloat4 double4
#else
#define dfloat float
#define dfloat4 float4
#endif


//  =============== RK first order DG kernels ===============
#define rx sG[k2][0]
#define ry sG[k2][1]
#define rz sG[k2][2]
#define sx sG[k2][3]
#define sy sG[k2][4]
#define sz sG[k2][5]
#define tx sG[k2][6]
#define ty sG[k2][7]
#define tz sG[k2][8]

kernel void rk_volume_elas(const    int K,
			   const dfloat * restrict vgeo,
			   const dfloat * restrict Dr,
			   const dfloat * restrict Ds,
			   const dfloat * restrict Dt,
			   const dfloat * restrict Q,
			   dfloat * restrict rhsQ){

  // loop over elements
  for(int k1=0; k1<(K+p_KblkV-1)/p_KblkV; ++k1; outer0){

    // total shared memory amounts to approx. 4 dfloats per thread
    shared dfloat sQ[p_KblkV][p_Nfields][p_Np];
    shared dfloat sG[p_KblkV][p_Nvgeo];

    // lapp has to survive multiple inner loops
    for(int k2 = 0; k2 < p_KblkV; ++k2; inner1){
      for(int i=0;i<p_Np;++i;inner0){
	int k = k1*p_KblkV + k2;
	if (k < K){

          // load geometric factors into shared memory
          int m = i;
          while(m<p_Nvgeo){
            sG[k2][m] = vgeo[m+p_Nvgeo*k];
	    m += p_Np;
          }

          // load p into shared memory for element k
	  int offset = 0;
	  const int id = i + k*p_Np*p_Nfields;
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    sQ[k2][fld][i] = Q[id + offset];
	    offset += p_Np;
	    
	  }

        }
      }
    }
    barrier(localMemFence);

    for(int k2 = 0; k2 < p_KblkV; ++k2; inner1){
      // loop over nodes
      for(int i=0;i<p_Np;++i;inner0){
	int k = k1*p_KblkV + k2;
	if (k < K){

	  dfloat Qr[p_Nfields], Qs[p_Nfields], Qt[p_Nfields];
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    Qr[fld] = 0.f; Qs[fld] = 0.f; Qt[fld] = 0.f;
	  }

	  for(int j=0;j<p_Np;++j){
	    const dfloat Dr_ij = Dr[i+j*p_Np];
	    const dfloat Ds_ij = Ds[i+j*p_Np];
	    const dfloat Dt_ij = Dt[i+j*p_Np];

	    for (int fld = 0; fld < p_Nfields; ++fld){
	      const dfloat Qfld = sQ[k2][fld][j];
	      Qr[fld] += Dr_ij*Qfld;
	      Qs[fld] += Ds_ij*Qfld;
	      Qt[fld] += Dt_ij*Qfld;
	    }
          }
	  dfloat Qx[p_Nfields],Qy[p_Nfields],Qz[p_Nfields];
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    Qx[fld] = rx*Qr[fld] + sx*Qs[fld] + tx*Qt[fld];
	    Qy[fld] = ry*Qr[fld] + sy*Qs[fld] + ty*Qt[fld];
	    Qz[fld] = rz*Qr[fld] + sz*Qs[fld] + tz*Qt[fld];
	  }

	  const dfloat divSx = Qx[3] + Qy[8] + Qz[7];
          const dfloat divSy = Qx[8] + Qy[4] + Qz[6];
	  const dfloat divSz = Qx[7] + Qy[6] + Qz[5];

          int id = i + k*p_Nfields*p_Np;
          rhsQ[id] = divSx;	    id += p_Np;
          rhsQ[id] = divSy;         id += p_Np;
          rhsQ[id] = divSz;         id += p_Np;
          rhsQ[id] = Qx[0];         id += p_Np;
          rhsQ[id] = Qy[1];         id += p_Np;
          rhsQ[id] = Qz[2];         id += p_Np;
          rhsQ[id] = Qy[2] + Qz[1]; id += p_Np;
          rhsQ[id] = Qx[2] + Qz[0]; id += p_Np;
          rhsQ[id] = Qx[1] + Qy[0];
#if 0
	  if (k==0){
	    dfloat rhs1 = Qx[0];
	    dfloat rhs2 = Qy[1];
	    dfloat rhs3 = Qz[2];
	    printf("vol terms[%d] = %g, %g, %g, %g, %g, %g\n",
		   i,divSx,divSy,divSz,rhs1,rhs2,rhs3);
	  }
#endif
        }
      }
    }

  }
}


// split part of kernel
kernel void rk_surface_elas(const    int K,
			    const dfloat * restrict fgeo,
			    const    int * restrict Fmask,
			    const    int * restrict vmapP,
			    const dfloat * restrict LIFT,
			    const dfloat * restrict Q,
			    dfloat * restrict rhsQ){

  // loop over elements
  for(int k1=0;k1<(K+p_KblkS-1)/p_KblkS;++k1;outer0){

    // total shared memory amounts to approx. 4 dfloats per thread
    shared dfloat s_flux[p_KblkS][p_Nfields][p_NfpNfaces];

    for(int k2 = 0; k2 < p_KblkS; ++k2; inner1){
      for(int i=0;i<p_T;++i;inner0){
	int k = k1*p_KblkS + k2;

	if (k < K){
          // retrieve traces (should move earlier)
          if(i<p_NfpNfaces){

            const int f = i/p_Nfp;

	    const int fid = Fmask[i];
            int idM = fid + k*p_Np*p_Nfields;
            int idP = vmapP[i + k*p_NfpNfaces];
	    const int isBoundary = idM==idP;

            int id = f*p_Nfgeo + p_Nfgeo*p_Nfaces*k;
	    const dfloat Fscale = fgeo[id];
	    const dfloat nx = fgeo[id+1];
	    const dfloat ny = fgeo[id+2];
	    const dfloat nz = fgeo[id+3];

	    dfloat dQ[p_Nfields];
	    for (int fld = 0; fld < p_Nfields; ++fld){
	      dQ[fld] = -Q[idM];
	      if (isBoundary==0){ // if interior face. else, QP = 0 for ABC
		dQ[fld] += Q[idP];
	      }
	      idM += p_Np;
	      idP += p_Np;
	    }

	    // central flux terms
	    dfloat fc[p_Nfields];
	    fc[0] = dQ[3]*nx + dQ[8]*ny + dQ[7]*nz;
	    fc[1] = dQ[8]*nx + dQ[4]*ny + dQ[6]*nz;
	    fc[2] = dQ[7]*nx + dQ[6]*ny + dQ[5]*nz;
	    fc[3] = dQ[0]*nx;
	    fc[4] = dQ[1]*ny;
	    fc[5] = dQ[2]*nz;
	    fc[6] = dQ[2]*ny + dQ[1]*nz;
	    fc[7] = dQ[2]*nx + dQ[0]*nz;
	    fc[8] = dQ[1]*nx + dQ[0]*ny;

	    // velocity penalties
	    dfloat fp = fc[3]*nx + fc[8]*ny + fc[7]*nz;
	    s_flux[k2][0][i] = fc[0] + p_tau_v*fp;

	    fp = fc[8]*nx + fc[4]*ny + fc[6]*nz;
	    s_flux[k2][1][i] = fc[1] + p_tau_v*fp;

	    fp = fc[7]*nx + fc[6]*ny + fc[5]*nz;
	    s_flux[k2][2][i] = fc[2] + p_tau_v*fp;

	    // stress penalties
	    fp = fc[0]*nx;
	    s_flux[k2][3][i] = fc[3] + p_tau_s*fp;

	    fp = fc[1]*ny;
	    s_flux[k2][4][i] = fc[4] + p_tau_s*fp;

	    fp = fc[2]*nz;
	    s_flux[k2][5][i] = fc[5] + p_tau_s*fp;

	    fp = fc[2]*ny + fc[1]*nz;
	    s_flux[k2][6][i] = fc[6] + p_tau_s*fp;

	    fp = fc[2]*nx + fc[0]*nz;
	    s_flux[k2][7][i] = fc[7] + p_tau_s*fp;

	    fp = fc[1]*nx + fc[0]*ny;
	    s_flux[k2][8][i] = fc[8] + p_tau_s*fp;

	    // scale by .5 and J^f/J
	    for (int fld = 0; fld < p_Nfields; ++fld){
	      s_flux[k2][fld][i] *= .5f*Fscale;
	    }
#if 0
	    if (k==0){
	      dfloat f1 = s_flux[k2][0][i];
	      dfloat f2 = s_flux[k2][1][i];
	      dfloat f3 = s_flux[k2][2][i];
	      dfloat f4 = s_flux[k2][3][i];
	      dfloat f5 = s_flux[k2][4][i];
	      dfloat f6 = s_flux[k2][5][i];
	      printf("surf_fluxes(%d) = %g, %g, %g, %g, %g, %g\n",
		     i,f1,f2,f3,f4,f5,f6);
	    }
#endif
          }
        }
      }
    }
    barrier(localMemFence);

    for(int k2 = 0; k2 < p_KblkS; ++k2; inner1){
      for(int i=0; i<p_T; ++i; inner0){

	int k = k1*p_KblkS + k2;
	if (k < K && i<p_Np){

	  // accumulate lift/normal lift contributions
	  int id = i + k*p_Nfields*p_Np;
	  dfloat val[p_Nfields];
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    //val[fld] = rhsQ[id]; id += p_Np;
	    val[fld] = 0.f;
	  }

	  for(int j=0;j<p_NfpNfaces;++j){
	    const dfloat Lij = LIFT[i + j*p_Np];

	    // v testing
	    for (int fld = 0; fld < p_Nfields; ++fld){
	      val[fld] += Lij * s_flux[k2][fld][j];
	    }
	  }
#if 0
	  if (k==0){
	    dfloat rhs1 = val[0];
	    dfloat rhs2 = val[1];
	    dfloat rhs3 = val[2];
	    dfloat rhs4 = val[3];
	    dfloat rhs5 = val[4];
	    dfloat rhs6 = val[5];
	    printf("surf rhs[%d] = %g, %g, %g, %g, %g, %g\n",
		   i,rhs1,rhs2,rhs3,rhs4,rhs5,rhs6);
	  }
#endif

	  id = i + k*p_Nfields*p_Np;
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    rhsQ[id] += val[fld]; id += p_Np;
	  }
        }
      }
    }
  }
}

kernel void rk_update_elas(const int K,
			   const dfloat * restrict Vq,
			   const dfloat * restrict Pq,
			   const dfloat * restrict rhoq,
			   const dfloat * restrict lambdaq,
			   const dfloat * restrict muq,
			   const dfloat * restrict c11q,
			   const dfloat * restrict c12q,
			   const dfloat ftime,
			   const dfloat * restrict fsrc,
			   const dfloat fa,
			   const dfloat fb,
			   const dfloat fdt,
			   const dfloat * restrict rhsQ,
			   dfloat * restrict resQ,
			   dfloat * restrict Q){

  for(int k1=0; k1<(K+p_KblkU-1)/p_KblkU; ++k1; outer0){

    shared dfloat sQ[p_KblkV][p_Nfields][p_Nq_reduced];

    exclusive dfloat rv1,rv2,rv3;
    exclusive dfloat rsxx,rsyy,rszz,rsyz,rsxy,rsxz;

    exclusive int k;

    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      for(int i = 0; i < p_Nq_reduced; ++i; inner0){

	k = k1*p_KblkU + k2; // no need for klist here for heterogeneous WADG

	if (k < K && i < p_Np){

	  int id = i + k*p_Np*p_Nfields;
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    sQ[k2][fld][i] = rhsQ[id]; id += p_Np;
	  }
	}
      }
    }
    barrier(localMemFence);

    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      for(int i = 0; i < p_Nq_reduced; ++i; inner0){

	if (k < K){

	  // interp to quad nodes
	  rv1 = 0.f;  rv2 = 0.f;  rv3 = 0.f;
	  rsxx = 0.f; rsyy = 0.f; rszz = 0.f;
	  rsyz = 0.f; rsxy = 0.f; rsxz = 0.f;
	  for (int j = 0; j < p_Np; ++j){

	    const dfloat Vq_ij = Vq[i + j*p_Nq_reduced];
	    rv1  += Vq_ij * sQ[k2][0][j];
	    rv2  += Vq_ij * sQ[k2][1][j];
	    rv3  += Vq_ij * sQ[k2][2][j];
	    rsxx += Vq_ij * sQ[k2][3][j];
	    rsyy += Vq_ij * sQ[k2][4][j];
	    rszz += Vq_ij * sQ[k2][5][j];
	    rsyz += Vq_ij * sQ[k2][6][j];
	    rsxz += Vq_ij * sQ[k2][7][j];
	    rsxy += Vq_ij * sQ[k2][8][j];

	  }
	}
      }
    }
    barrier(localMemFence);

    // pointwise scaling
    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      for(int i = 0; i < p_Nq_reduced; ++i; inner0){

	if (k < K){
	  const int id = i + k*p_Nq_reduced;
	  const dfloat rho = rhoq[id];
	  const dfloat lambda = lambdaq[id];
	  const dfloat mu = muq[id];

	  // velocity
	  sQ[k2][0][i] = rho*rv1;
	  sQ[k2][1][i] = rho*rv2;
	  sQ[k2][2][i] = rho*rv3;

#if 0
	  const dfloat c11 = c11q[id];
	  const dfloat c12 = c12q[id];

	  // transversely isotropic media
	  sQ[k2][3][i] = c11*rsxx + c12*rsyy + lambda*rszz;
	  sQ[k2][4][i] = c11*rsyy + c12*rsxx + lambda*rszz;
	  sQ[k2][5][i] = (2.f*mu+lambda)*rszz + lambda*rsxx + lambda*rsyy;
	  sQ[k2][6][i] = mu*rsyz;
	  sQ[k2][7][i] = mu*rsxz;
	  sQ[k2][8][i] = .5f*(c11-c12)*rsxy;
#else
          const dfloat A = 2.f*mu+lambda;
	  sQ[k2][3][i] = A*rsxx + lambda*rsyy + lambda*rszz;
	  sQ[k2][4][i] = A*rsyy + lambda*rsxx + lambda*rszz;
	  sQ[k2][5][i] = A*rszz + lambda*rsxx + lambda*rsyy;
	  sQ[k2][6][i] = mu*rsyz;
	  sQ[k2][7][i] = mu*rsxz;
	  sQ[k2][8][i] = mu*rsxy;
#endif
	}
      } // inner0
    } // inner1
    barrier(localMemFence);

    // reduce down and increment
    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      for(int i = 0; i < p_Nq_reduced; ++i; inner0){

	if (k < K && i < p_Np){

	  dfloat rQ[p_Nfields];
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    rQ[fld] = 0.f;
	  }
	  for (int j = 0; j < p_Nq_reduced; ++j){
	    const dfloat Pq_ij = Pq[i + j*p_Np];
	    for (int fld = 0; fld < p_Nfields; ++fld){
	      rQ[fld] += Pq_ij * sQ[k2][fld][j];
	    }
	  }

	  // apply ricker pulse to x,y coordinates
          //const dfloat ff = ;
	  //rQ[0] += ftime*fsrc[i + k*p_Np];
	  //rQ[0] += ftime*0.1;
	  //rQ[1] += ff;

	  int id = i + k*p_Np*p_Nfields;
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    dfloat res = resQ[id];
	    res = fa*res + fdt*rQ[fld];
	    resQ[id] = res;
	    Q[id] += fb*res;
	    id += p_Np;
	  }
	}

      } // inner 0
    } // inner1
  }// outer 0
}


kernel void rk_update_const_elas(const int K,
				 const dfloat * restrict Vq,
				 const dfloat * restrict Pq,
				 const dfloat * restrict rhoq,
				 const dfloat * restrict lambdaq,
				 const dfloat * restrict muq,
				 const dfloat * restrict c11q,
				 const dfloat * restrict c12q,
				 const dfloat ftime,
				 const dfloat * restrict fsrc,
				 const dfloat fa,
				 const dfloat fb,
				 const dfloat fdt,
				 const dfloat * restrict rhsQ,
				 dfloat * restrict resQ,
				 dfloat * restrict Q){

  for(int k1=0; k1<(K+p_KblkU-1)/p_KblkU; ++k1; outer0){

    shared dfloat sQ[p_KblkV][6][p_Nq_reduced];

    //exclusive dfloat rv1,rv2,rv3;
    exclusive dfloat rsxx,rsyy,rszz,rsyz,rsxy,rsxz;

    exclusive int k;

    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      for(int i = 0; i < p_Nq_reduced; ++i; inner0){

	k = k1*p_KblkU + k2; // no need for klist here for heterogeneous WADG

	if (k < K && i < p_Np){

	  int id = i + k*p_Np*p_Nfields + 3*p_Np;
	  for (int fld = 0; fld < 6; ++fld){
	    sQ[k2][fld][i] = rhsQ[id]; id += p_Np;
	  }
	}
      }
    }
    barrier(localMemFence);

    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      for(int i = 0; i < p_Nq_reduced; ++i; inner0){

	if (k < K){

	  // interp to quad nodes
	  //rv1 = 0.f;  rv2 = 0.f;  rv3 = 0.f;
	  rsxx = 0.f; rsyy = 0.f; rszz = 0.f;
	  rsyz = 0.f; rsxy = 0.f; rsxz = 0.f;
	  for (int j = 0; j < p_Np; ++j){

	    const dfloat Vq_ij = Vq[i + j*p_Nq_reduced];
	    //rv1  += Vq_ij * sQ[k2][0][j];
	    //rv2  += Vq_ij * sQ[k2][1][j];
	    //rv3  += Vq_ij * sQ[k2][2][j];
	    rsxx += Vq_ij * sQ[k2][0][j];
	    rsyy += Vq_ij * sQ[k2][1][j];
	    rszz += Vq_ij * sQ[k2][2][j];
	    rsyz += Vq_ij * sQ[k2][3][j];
	    rsxz += Vq_ij * sQ[k2][4][j];
	    rsxy += Vq_ij * sQ[k2][5][j];

	  }
	}
      }
    }
    barrier(localMemFence);

    // pointwise scaling
    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      for(int i = 0; i < p_Nq_reduced; ++i; inner0){

	if (k < K){
	  const int id = i + k*p_Nq_reduced;
	  //const dfloat rho = rhoq[id];
	  const dfloat lambda = lambdaq[id];
	  const dfloat mu = muq[id];

	  // velocity
	  //sQ[k2][0][i] = rho*rv1;
	  //sQ[k2][1][i] = rho*rv2;
	  //sQ[k2][2][i] = rho*rv3;

#if 0
	  const dfloat c11 = c11q[id];
	  const dfloat c12 = c12q[id];

	  // transversely isotropic media
	  sQ[k2][0][i] = c11*rsxx + c12*rsyy + lambda*rszz;
	  sQ[k2][1][i] = c11*rsyy + c12*rsxx + lambda*rszz;
	  sQ[k2][2][i] = (2.f*mu+lambda)*rszz + lambda*rsxx + lambda*rsyy;
	  sQ[k2][3][i] = mu*rsyz;
	  sQ[k2][4][i] = mu*rsxz;
	  sQ[k2][5][i] = .5f*(c11-c12)*rsxy;
#else
          const dfloat A = 2.f*mu+lambda;
	  sQ[k2][0][i] = A*rsxx + lambda*rsyy + lambda*rszz;
	  sQ[k2][1][i] = A*rsyy + lambda*rsxx + lambda*rszz;
	  sQ[k2][2][i] = A*rszz + lambda*rsxx + lambda*rsyy;
	  sQ[k2][3][i] = mu*rsyz;
	  sQ[k2][4][i] = mu*rsxz;
	  sQ[k2][5][i] = mu*rsxy;
#endif
	}
      } // inner0
    } // inner1
    barrier(localMemFence);

    // reduce down and increment
    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      for(int i = 0; i < p_Nq_reduced; ++i; inner0){

	if (k < K && i < p_Np){

	  dfloat rQ[6];
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    rQ[fld] = 0.f;
	  }
	  for (int j = 0; j < p_Nq_reduced; ++j){
	    const dfloat Pq_ij = Pq[i + j*p_Np];
	    for (int fld = 0; fld < 6; ++fld){
	      rQ[fld] += Pq_ij * sQ[k2][fld][j];
	    }
	  }

	  // apply ricker pulse to x,y coordinates
          //const dfloat ff = ;
	  //rQ[0] += ftime*fsrc[i + k*p_Np];
	  //rQ[0] += ftime*0.1;
	  //rQ[1] += ff;

	  int id = i + k*p_Np*p_Nfields;
	  
	  dfloat res = resQ[id];
	  res = fa*res + fdt*rhsQ[id];
	  resQ[id] = res;
	  Q[id] += fb*res;
	  id += p_Np;

	  res = resQ[id];
	  res = fa*res + fdt*rhsQ[id];
	  resQ[id] = res;
	  Q[id] += fb*res;
	  id += p_Np;

	  
	  res = resQ[id];
	  res = fa*res + fdt*rhsQ[id];
	  resQ[id] = res;
	  Q[id] += fb*res;
	  id += p_Np;

	  res = resQ[id];
	  res = fa*res + fdt*rQ[0];
	  resQ[id] = res;
	  Q[id] += fb*res;
	  id += p_Np;

	  res = resQ[id];
	  res = fa*res + fdt*rQ[1];
	  resQ[id] = res;
	  Q[id] += fb*res;
	  id += p_Np;

	  
	  res = resQ[id];
	  res = fa*res + fdt*rQ[2];
	  resQ[id] = res;
	  Q[id] += fb*res;
	  id += p_Np;

	  
	  res = resQ[id];
	  res = fa*res + fdt*rQ[3];
	  resQ[id] = res;
	  Q[id] += fb*res;
	  id += p_Np;

	  
	  res = resQ[id];
	  res = fa*res + fdt*rQ[4];
	  resQ[id] = res;
	  Q[id] += fb*res;
	  id += p_Np;

	  

	  res = resQ[id];
	  res = fa*res + fdt*rQ[5];
	  resQ[id] = res;
	  Q[id] += fb*res;

	}
      } // inner 0
    } // inner1
  }// outer 0
}


//=================================Bernstein kernels======================================


kernel void rk_volume_bern_elas(const int K,
				const dfloat * restrict vgeo,
				const int4 * restrict D1_ids,
				const int4 * restrict D2_ids,
				const int4 * restrict D3_ids,
				const int4 * restrict D4_ids,
				const dfloat4 * restrict Dvals,
				const dfloat * restrict Q,
				dfloat * restrict rhsQ){



  // loop over elements
  for(int k1 = 0; k1 < (K+p_KblkV-1)/p_KblkV; ++k1; outer0){
    
    shared dfloat sQ[p_KblkV][p_Nfields][p_Np];
    shared dfloat sG[p_KblkV][p_Nvgeo];    
    
    // register used to store derivative matrices
    exclusive dfloat Dval1, Dval2, Dval3, Dval4;
    
    for(int k2 = 0; k2 < p_KblkV; ++k2; inner1){
      for(int i = 0; i < p_Np; ++i; inner0){
	const int k = k1*p_KblkV + k2;
	if(k < K){
	  
	  // load geometric factors into shared memory
	  int m = i;
	  while(m < p_Nvgeo){
	    sG[k2][m] = vgeo[m+p_Nvgeo*k];
	    m += p_Np;
	  }
	  
	  // load p into shared memory for element k
	  int offset = 0;
	  const int id = i + k * p_Np * p_Nfields;
	  for(int fld = 0; fld < p_Nfields; ++fld){
	    sQ[k2][fld][i] = Q[id + offset];
	    offset += p_Np;
	  }

	  // load derivative matrices into register
	  const dfloat4 Dvali = Dvals[i];
	  Dval1 = Dvali.x;
	  Dval2 = Dvali.y;
	  Dval3 = Dvali.z;
	  Dval4 = Dvali.w;
	}
      }
    }
    barrier(localMemFence);

#define rx sG[k2][0]
#define ry sG[k2][1]
#define rz sG[k2][2]
#define sx sG[k2][3]
#define sy sG[k2][4]
#define sz sG[k2][5]
#define tx sG[k2][6]
#define ty sG[k2][7]
#define tz sG[k2][8]

    
    for(int k2 = 0; k2 < p_KblkV; ++k2; inner1){
      for(int i = 0; i < p_Np; ++i; inner0){
	const int k = k1*p_KblkV + k2;
	if(k < K){
	  
	  //extract the indices for derivative matrices
	  const int4 D1i = D1_ids[i];
	  const int4 D2i = D2_ids[i];
	  const int4 D3i = D3_ids[i];
	  const int4 D4i = D4_ids[i];
	  
	  dfloat Q1[p_Nfields],Q2[p_Nfields], Q3[p_Nfields], Q4[p_Nfields];
	  for(int fld = 0; fld<p_Nfields;++fld){
	    Q1[fld] = 0.f;
	    Q2[fld] = 0.f;
	    Q3[fld] = 0.f;
	    Q4[fld] = 0.f;
	  }
	  
	  for(int fld = 0; fld < p_Nfields; ++fld){
	    Q1[fld] = Dval1*sQ[k2][fld][D1i.x]+Dval2*sQ[k2][fld][D2i.x]+Dval3*sQ[k2][fld][D3i.x]+Dval4*sQ[k2][fld][D4i.x];
	    Q2[fld] = Dval1*sQ[k2][fld][D1i.y]+Dval2*sQ[k2][fld][D2i.y]+Dval3*sQ[k2][fld][D3i.y]+Dval4*sQ[k2][fld][D4i.y];
	    Q3[fld] = Dval1*sQ[k2][fld][D1i.z]+Dval2*sQ[k2][fld][D2i.z]+Dval3*sQ[k2][fld][D3i.z]+Dval4*sQ[k2][fld][D4i.z];
	    Q4[fld] = Dval1*sQ[k2][fld][D1i.w]+Dval2*sQ[k2][fld][D2i.w]+Dval3*sQ[k2][fld][D3i.w]+Dval4*sQ[k2][fld][D4i.w];
	  }
	  
	  for(int fld = 0; fld<p_Nfields; ++fld){
	    dfloat val1 = -0.5*Q1[fld] + 0.5*Q2[fld];
	    dfloat val2	= -0.5*Q1[fld] + 0.5*Q3[fld];
	    dfloat val3	= -0.5*Q1[fld] + 0.5*Q4[fld];

	    Q1[fld] = val1;
            Q2[fld] = val2;
            Q3[fld] = val3;
          }

	  for (int fld = 0; fld < p_Nfields; ++fld){
	    dfloat val1 = rx*Q1[fld] + sx*Q2[fld] + tx*Q3[fld];
	    dfloat val2 = ry*Q1[fld] + sy*Q2[fld] + ty*Q3[fld];
	    dfloat val3 = rz*Q1[fld] + sz*Q2[fld] + tz*Q3[fld];

	    Q1[fld] = val1;
	    Q2[fld] = val2;
            Q3[fld] = val3;
	  }
	  
	  const dfloat divSx = Q1[3] + Q2[8] + Q3[7];
	  const dfloat divSy = Q1[8] + Q2[4] + Q3[6];
	  const dfloat divSz = Q1[7] + Q2[6] + Q3[5];
	  
          int id = i + k*p_Nfields*p_Np;
          rhsQ[id] = divSx;
	  

	  id += p_Np;
          rhsQ[id] = divSy;         id += p_Np;
          rhsQ[id] = divSz;         id += p_Np;
	  rhsQ[id] = Q1[0];         id += p_Np;
	  rhsQ[id] = Q2[1];         id += p_Np;
          rhsQ[id] = Q3[2];         id += p_Np;
          rhsQ[id] = Q2[2] + Q3[1]; id += p_Np;
          rhsQ[id] = Q1[2] + Q3[0]; id += p_Np;
          rhsQ[id] = Q1[1] + Q2[0];
	  
	}
      }
    }
  }
}



kernel void rk_surface_bern_elas(const int K,
				 const dfloat * restrict fgeo,
				 const int * restrict Fmask,
				 const int * restrict vmapP,
				 const int4 * restrict slice_ids,
				 const int * restrict EEL_ids,
				 const dfloat * restrict EEL_vals,
				 const int * restrict L0_ids,
				 const dfloat * restrict L0_vals,
				 const dfloat * restrict cEL,
				 const dfloat * restrict Q,
				 dfloat * restrict rhsQ){



  // loop over elements
  for(int k1 = 0; k1 < (K+p_KblkS-1)/p_KblkS; ++k1; outer0){


    // total shared memory amounts to approx. 4 dfloats per thread
    shared dfloat s_flux[p_KblkS][p_Nfields][p_NfpNfaces];
    exclusive dfloat vtmp[p_Nfields];
    exclusive int f, nt;
    
    for(int k2 = 0; k2 < p_KblkS; ++k2; inner1){
      for(int i = 0; i < p_T; ++i; inner0){

	const int k = k1*p_KblkS + k2;
	f  = i/p_Nfp;
	nt = i % p_Nfp;
	
	if(k < K && i < p_NfpNfaces){

	  const int fid = Fmask[i];
	  int idM = fid + k*p_Np*p_Nfields;
	  int idP = vmapP[i+ k*p_NfpNfaces];
	  const int isBoundary = idM==idP;
	    
	  int id = f*p_Nfgeo + p_Nfgeo*p_Nfaces*k;
	  const dfloat Fscale = fgeo[id];
	  const dfloat nx     = fgeo[id+1];
	  const dfloat ny     = fgeo[id+2];
	  const dfloat nz     = fgeo[id+3];
	  
	  dfloat dQ[p_Nfields];
	  for(int fld = 0; fld < p_Nfields; ++fld){
	    dQ[fld] = -Q[idM];
	    if(isBoundary==0){
	      dQ[fld] += Q[idP];
	    }
	    idM += p_Np;
	    idP += p_Np;
	  }
	
	  //central flux terms (how to use symmetricity?)
	  dfloat fc[p_Nfields];
	  fc[0] = dQ[3]*nx + dQ[8]*ny + dQ[7]*nz;
	 
	  fc[1] = dQ[8]*nx + dQ[4]*ny + dQ[6]*nz;
	  fc[2] = dQ[7]*nx + dQ[6]*ny + dQ[5]*nz;
	  fc[3] = dQ[0]*nx;
	  fc[4] = dQ[1]*ny;
	  fc[5] = dQ[2]*nz;
	  fc[6] = dQ[2]*ny + dQ[1]*nz;
	  fc[7] = dQ[2]*nx + dQ[0]*nz;
	  fc[8] = dQ[1]*nx + dQ[0]*ny;
	  	  
	  // velocity penalties
	  dfloat fp = fc[3]*nx + fc[8]*ny + fc[7]*nz;
	  s_flux[k2][0][i] = fc[0] + p_tau_v*fp;
	  
	  fp = fc[8]*nx + fc[4]*ny + fc[6]*nz;
	  s_flux[k2][1][i] = fc[1] + p_tau_v*fp;
	  
	  fp = fc[7]*nx + fc[6]*ny + fc[5]*nz;
	  s_flux[k2][2][i] = fc[2] + p_tau_v*fp;
	    
	  // stress penalties
	  fp = fc[0]*nx;
	  s_flux[k2][3][i] = fc[3] + p_tau_s*fp;
	  
	  fp = fc[1]*ny;
	  s_flux[k2][4][i] = fc[4] + p_tau_s*fp;
	  
	  fp = fc[2]*nz;
	  s_flux[k2][5][i] = fc[5] + p_tau_s*fp;
	  
	  fp = fc[2]*ny + fc[1]*nz;
	  s_flux[k2][6][i] = fc[6] + p_tau_s*fp;
	  
	  fp = fc[2]*nx + fc[0]*nz;
	  s_flux[k2][7][i] = fc[7] + p_tau_s*fp;
	  
	  fp = fc[1]*nx + fc[0]*ny;
	  s_flux[k2][8][i] = fc[8] + p_tau_s*fp;
	    
	  // scale by .5 and J^f/J
	  for (int fld = 0; fld < p_Nfields; ++fld){
	    s_flux[k2][fld][i] *= .5f*Fscale;
	  }
	}
      }
    }
    barrier(localMemFence);
        
    // apply L0 dense, loop over faces, reuse operator
    for(int k2 = 0; k2 < p_KblkS; ++k2;inner1){
      for(int i = 0; i< p_T; ++i; inner0){
	const int k = k1*p_KblkS + k2;
	if(k < K && i < p_NfpNfaces){
	  dfloat val1 = 0.f;
	  dfloat val2 = 0.f;
	  dfloat val3 = 0.f;
	  dfloat val4 = 0.f;
	  dfloat val5 = 0.f;
	  dfloat val6 = 0.f;
	  dfloat val7 = 0.f;
	  dfloat val8 = 0.f;
	  dfloat val9 = 0.f;
	  
	  for(int j = 0; j < p_L0_nnz; ++j){

	    const dfloat L0_j = L0_vals[nt+j*p_Nfp];
	    int id = L0_ids[nt + j*p_Nfp] + f*p_Nfp;
	    
	    val1 += L0_j * s_flux[k2][0][id];
	    val2 += L0_j * s_flux[k2][1][id];
	    val3 += L0_j * s_flux[k2][2][id];
	    val4 += L0_j * s_flux[k2][3][id];
	    val5 += L0_j * s_flux[k2][4][id];
	    val6 += L0_j * s_flux[k2][5][id];
	    val7 += L0_j * s_flux[k2][6][id];
	    val8 += L0_j * s_flux[k2][7][id];
	    val9 += L0_j * s_flux[k2][8][id];
	  }

	  vtmp[0] = val1;
	  vtmp[1] = val2;
	  vtmp[2] = val3;
	  vtmp[3] = val4;
	  vtmp[4] = val5;
	  vtmp[5] = val6;
	  vtmp[6] = val7;
	  vtmp[7] = val8;
	  vtmp[8] = val9;       
	}
      }
    }
    barrier(localMemFence);

    // transfer the register into shared memory s_flux in order to save memory space
    for(int k2 = 0; k2 < p_KblkS; ++k2; inner1){
      for(int i = 0; i < p_T; ++i; inner0){
	const int k = k1*p_KblkS + k2;
	if(k < K && i < p_NfpNfaces){
	  for(int j = 0; j < p_Nfields; ++j){
	    s_flux[k2][j][i] = vtmp[j];
	  }
	}
      }
    }
    barrier(localMemFence);
    
    
    // apply sparse EEL matrix
    for(int k2 = 0; k2 < p_KblkS; ++k2; inner1){
      for(int i = 0; i < p_T; ++i; inner0){
	const int k = k1*p_KblkS + k2;
	if(k < K && i < p_Np){

	  int id = i + k*p_Np*p_Nfields;
	  dfloat val1 = rhsQ[id]; id += p_Np;
	  dfloat val2 = rhsQ[id]; id += p_Np;
	  dfloat val3 = rhsQ[id]; id += p_Np;
	  dfloat val4 = rhsQ[id]; id += p_Np;
	  dfloat val5 = rhsQ[id]; id += p_Np;
	  dfloat val6 = rhsQ[id]; id += p_Np;
	  dfloat val7 = rhsQ[id]; id += p_Np;
	  dfloat val8 = rhsQ[id]; id += p_Np;
	  dfloat val9 = rhsQ[id];

	  for(int j = 0; j < p_EEL_nnz; ++j){

	    const int col_id = EEL_ids[i+j*p_Np];
	    const dfloat EEL_val = EEL_vals[i+j*p_Np];

	    val1 += EEL_val*s_flux[k2][0][col_id];
	    val2 += EEL_val*s_flux[k2][1][col_id];
	    val3 += EEL_val*s_flux[k2][2][col_id];
	    val4 += EEL_val*s_flux[k2][3][col_id];
	    val5 += EEL_val*s_flux[k2][4][col_id];
	    val6 += EEL_val*s_flux[k2][5][col_id];
	    val7 += EEL_val*s_flux[k2][6][col_id];
	    val8 += EEL_val*s_flux[k2][7][col_id];
	    val9 += EEL_val*s_flux[k2][8][col_id];
	  }
	  id = i+k*p_Np*p_Nfields;
	  rhsQ[id] = val1; id += p_Np;
	  rhsQ[id] = val2; id += p_Np;
	  rhsQ[id] = val3; id += p_Np;
	  rhsQ[id] = val4; id += p_Np;
	  rhsQ[id] = val5; id += p_Np;
	  rhsQ[id] = val6; id += p_Np;
	  rhsQ[id] = val7; id += p_Np;
	  rhsQ[id] = val8; id += p_Np;
	  rhsQ[id] = val9; 
	}
      }
    }
  }
}


kernel void rk_update_bern_const_elas(const int K,
				      const int * col_id,
				      const dfloat * restrict col_val,
				      const int * restrict L_id,
				      const dfloat * restrict rho,
				      const dfloat * restrict lambda,
				      const dfloat * restrict mu,
				      const dfloat4 * restrict ENMT_val,
				      const int4 * restrict ENMT_id,
				      const dfloat4 * restrict ENM_val,
				      const int4 * restrict ENM_id,
				      const dfloat * restrict E,
				      const dfloat * restrict co,
				      const int * restrict ENMT_index,
				      const dfloat ftime,
				      const dfloat * restrict fsrc,
				      const dfloat fa,
				      const dfloat fb,
				      const dfloat fdt,
				      const dfloat * restrict rhsQ,
				      dfloat * restrict resQ,
				      dfloat * restrict Q){

  for(int k1 = 0; k1 <(K+p_KblkU-1)/p_KblkU ; ++k1; outer0){
    
    // Here 12 is the number of how many different components that used in update.
    shared dfloat s_p[p_KblkU][6][p_NMp];
    shared dfloat s_q[p_KblkU][6][p_NMp];
    exclusive dfloat r0[p_N];
    exclusive dfloat r1[p_N];
    exclusive dfloat r2[p_N];
    exclusive dfloat r3[p_N];
    exclusive dfloat r4[p_N];
    exclusive dfloat r5[p_N];
      
    //load values from rhsQ to s_p
    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      const int k = k1*p_KblkU + k2;
      if(k < K){
        for(int i = 0; i < p_NMp; ++i; inner0){
          if(i < p_Np){
            int id = k * p_Np * p_Nfields + i + 3 * p_Np;
            for(int fld = 0; fld < 6; ++fld){
              s_p[k2][fld][i] = rhsQ[id];
              id += p_Np;
            }
          }
        }
      }
    }
    barrier(localMemFence);
    
    //BB multiplication, here we perform multiplications
    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      const int k = k1*p_KblkU + k2;
      if(k < K){
        for(int i = 0; i < p_NMp; ++i; inner0){
          // used to store the sum
          dfloat val[6];
          // initialize val vector
          for(int fld = 0; fld < 6; ++fld){
            val[fld] = 0.f;
          }

          for(int j = 0; j < 4; ++j){
            const int jid = i + j * p_NMp;
            const dfloat L = col_val[jid];
            const int lid  = col_id[jid];
            const int j1   = L_id[jid];
	    
            const dfloat lambdaval = lambda[p_1p*k+j1];
            const dfloat muval = mu[p_1p*k+j1];
	    
            // reudce to 6 registers/6 fields smem
            const dfloat p0 = s_p[k2][0][lid];
            const dfloat p1 = s_p[k2][1][lid];
            const dfloat p2 = s_p[k2][2][lid];

            val[0] += lambdaval * L * (p0 + p1 + p2) + 2.f*muval * L * p0;
            val[1] += lambdaval * L * (p0 + p1 + p2) + 2.f*muval * L * p1;
            val[2] += lambdaval * L * (p0 + p1 + p2) + 2.f*muval * L * p2;
            val[3] += muval * L * s_p[k2][3][lid];
            val[4] += muval * L * s_p[k2][4][lid];
            val[5] += muval * L * s_p[k2][5][lid];
          }
	  
          for(int fld = 0; fld < 6; ++fld){
            s_q[k2][fld][i] = val[fld];
          }
        }
      }
    }
    barrier(localMemFence);
    
    for(int h = 0; h < p_N-1; ++h){
      
      const int hp  = (p_N-h+1)*(p_N-h+2)*(p_N-h+3)/6;
      const int hid = ENMT_index[h]/4;
      
      for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
        const int k = k1*p_KblkU + k2;
        if(k < K){
          for(int i = 0; i < p_NMp; ++i; inner0){
            if(i< hp){
	      
              dfloat val[6];
              for(int fld = 0; fld < 6; ++fld){
                val[fld] = 0.f;
              }
	      
              const int jid = i + hid;
              const int4 Eid = ENMT_id[jid];
              const dfloat4 Eval = ENMT_val[jid];
	      
              for(int fld = 0; fld < 6; ++fld){
                val[fld] =
                  Eval.x * s_q[k2][fld][Eid.x]+
                  Eval.y * s_q[k2][fld][Eid.y]+
                  Eval.z * s_q[k2][fld][Eid.z]+
                  Eval.w * s_q[k2][fld][Eid.w];
              }
	      
              for(int fld = 0; fld < 6; ++fld){
                s_p[k2][fld][i] = val[fld];
              }

              r0[h] = val[0] * co[h];
              r1[h] = val[1] * co[h];
              r2[h] = val[2] * co[h];
              r3[h] = val[3] * co[h];
              r4[h] = val[4] * co[h];
              r5[h] = val[5] * co[h];
            }
          }
        }
      }
      barrier(localMemFence);

      for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
        const int k = k1*p_KblkU + k2;
        if(k < K){
          for(int i = 0; i < p_NMp; ++i; inner0){
            if(i < hp){
              for(int fld = 0; fld < 6; ++fld){
                s_q[k2][fld][i] = s_p[k2][fld][i];
              }
            }
          }
        }
      }
      barrier(localMemfence);
    }

    //Do multiplication of E21^T * shared
    const int hid = ENMT_index[p_N-1]/4;
    for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
      const int k = k1*p_KblkU + k2;
      if(k < K){
        for(int i = 0; i < p_NMp; ++i; inner0){
          if(i < p_1p){

            dfloat val[6];
            for(int fld = 0; fld < 6; ++fld){
              val[fld] = 0.f;
            }
	    
            const int jid = i + hid;
            const int4 Eid = ENMT_id[jid];
            const dfloat4 Eval = ENMT_val[jid];
	    
            for(int fld = 0; fld < 6; ++fld){
              val[fld] =
                Eval.x * s_q[k2][fld][Eid.x]+
                Eval.y * s_q[k2][fld][Eid.y]+
                Eval.z * s_q[k2][fld][Eid.z]+
                Eval.w * s_q[k2][fld][Eid.w];
            }
	    
            for(int fld = 0; fld < 6; ++fld){
              s_p[k2][fld][i] = val[fld];
            }
          }
        }
      }
    }
    barrier(localMemFence);
    
    // Do the multiplication of E*shared
    for(int k2 = 0 ; k2 < p_KblkU; ++k2; inner1){
      const int k = k1*p_KblkU + k2;
      if(k < K){
        for(int i = 0; i < p_NMp; ++i; inner0){
          if(i < p_1p){
	    
            dfloat val[6];
            for(int fld = 0; fld < 6; ++fld){
              val[fld] = 0.f;
            }
	    
            for(int fld = 0; fld < 6; ++fld){
              for(int j = 0; j < p_1p; ++j){
                val[fld] += E[j*p_1p+i]*s_p[k2][fld][j];
              }
            }
            for(int fld = 0; fld < 6; ++fld){
              s_q[k2][fld][i] = val[fld];
            }
          }
        }
      }
    }
    barrier(localMemFence);
    
    for(int r = 0; r < p_N-1; ++r){

      const int rp  = (r+3)*(r+4)*(r+5)/6;
      const int rid = ENMT_index[p_N-2-r]/4;
      
      for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
        const int k = k1*p_KblkU + k2;
        if(k < K){
          for(int i = 0; i < p_NMp; ++i; inner0){
            if(i < rp){

              dfloat val[6];
              for(int fld = 0; fld < 6; ++fld){
                val[fld] = 0.f;
              }
	      
              const int jid = i + rid;
              const int4 Eid = ENM_id[jid];
              const dfloat4 Eval = ENM_val[jid];

              for(int fld = 0; fld < 6; ++fld){
                val[fld]=
                  Eval.x * s_q[k2][fld][Eid.x]+
                  Eval.y * s_q[k2][fld][Eid.y]+
                  Eval.z * s_q[k2][fld][Eid.z]+
                  Eval.w * s_q[k2][fld][Eid.w];
              }
	      
              r0[p_N-2-r] += val[0];
              r1[p_N-2-r] += val[1];
              r2[p_N-2-r] += val[2];
              r3[p_N-2-r] += val[3];
              r4[p_N-2-r] += val[4];
              r5[p_N-2-r] += val[5];
            }
          }
        }
      }
      barrier(localMemFence);
      
      for(int k2 = 0; k2 < p_KblkU; ++k2; inner1){
        const int k = k1*p_KblkU + k2;
        if(k < K){
          for(int i = 0; i < p_NMp; ++i; inner0){
            if(i < rp){

              s_q[k2][0][i] = r0[p_N-2-r];
              s_q[k2][1][i] = r1[p_N-2-r];
              s_q[k2][2][i] = r2[p_N-2-r];
              s_q[k2][3][i] = r3[p_N-2-r];
              s_q[k2][4][i] = r4[p_N-2-r];
              s_q[k2][5][i] = r5[p_N-2-r];
	      
            }
          }
        }
      }
      barrier(localMemFence);
    }
    
    // Combine the results together
    for(int k2 = 0; k2 < p_KblkU; ++ k2; inner1){
      const int k = k1*p_KblkU + k2;
      if(k < K){
	for(int i = 0; i < p_NMp; ++i; inner0){
	  if(i < p_Np){

	    int id = k * p_Np * p_Nfields + i;
	    
	     dfloat resv = resQ[id];
	     resv = fa * resv + fdt * rhsQ[id];
	     resQ[id] = resv;
	     Q[id] += fb * resv;
	     id += p_Np;
	     
	     resv = resQ[id];
	     resv = fa * resv + fdt * rhsQ[id];
	     resQ[id] = resv;
	     Q[id] += fb * resv;
	     id += p_Np;
	     
	     resv = resQ[id];
	     resv = fa * resv + fdt * rhsQ[id];
	     resQ[id] = resv;
	     Q[id] += fb * resv;
	     id += p_Np;

	     dfloat resu = resQ[id];
	     resu = fa * resu + fdt * s_q[k2][0][i];
	     resQ[id] = resu;
	     Q[id] += fb * resu;
	     id += p_Np;
	     
	     resu = resQ[id];
	     resu = fa * resu + fdt * s_q[k2][1][i];
	     resQ[id] = resu;
	     Q[id] += fb * resu;
	     id += p_Np;

	     resu = resQ[id];
	     resu = fa * resu + fdt * s_q[k2][2][i];
	     resQ[id] = resu;
	     Q[id] += fb * resu;
	     id += p_Np;

	     resu = resQ[id];
	     resu = fa * resu + fdt * s_q[k2][3][i];
	     resQ[id] = resu;
	     Q[id] += fb * resu;
	     id += p_Np;

	     resu = resQ[id];
	     resu = fa * resu + fdt * s_q[k2][4][i];
	     resQ[id] = resu;
	     Q[id] += fb * resu;
	     id += p_Np;
	    
	     resu = resQ[id];
	     resu = fa * resu + fdt * s_q[k2][5][i];
	     resQ[id] = resu;
	     Q[id] += fb * resu;
	     id += p_Np;
          }
        }
      }
    }
  }
}
